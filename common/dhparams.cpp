#include "errors.h"
#include <openssl/dh.h>
#include <openssl/evp.h>

DH *get_dh2048(void) {
    static unsigned char dhp_2048[] = {
        0xEE, 0x21, 0x70, 0x3F, 0x8C, 0xD6, 0x26, 0x3E, 0xB3, 0xE5, 0x34, 0x5B,
        0x4F, 0x58, 0xE7, 0x54, 0xE2, 0x8B, 0xC6, 0x2F, 0x9A, 0xA2, 0x2C, 0xB6,
        0x03, 0xDA, 0x30, 0x24, 0xEF, 0x9E, 0x73, 0x73, 0x27, 0xDF, 0x45, 0x13,
        0x1C, 0xDB, 0x04, 0x8A, 0xE5, 0xA7, 0xA1, 0xB7, 0x5F, 0x18, 0x77, 0xDC,
        0x17, 0x60, 0x07, 0xB6, 0x6E, 0x58, 0x2B, 0x67, 0xDB, 0x20, 0xF9, 0xDB,
        0x83, 0x15, 0xB1, 0xF1, 0x40, 0x33, 0x39, 0x1B, 0xF2, 0x55, 0x6E, 0x3E,
        0xEC, 0x0D, 0xB9, 0x00, 0xF8, 0xD8, 0x6F, 0x18, 0x47, 0x32, 0x7D, 0x0C,
        0xAC, 0x12, 0x20, 0x12, 0xFF, 0x5B, 0xA0, 0x74, 0x92, 0xA6, 0xE8, 0x6C,
        0x9E, 0x6A, 0x17, 0xF0, 0x7D, 0x5C, 0xC2, 0xA9, 0xB7, 0x89, 0x26, 0x97,
        0xCD, 0x23, 0x80, 0xA7, 0xFC, 0xB5, 0xC2, 0x2D, 0x78, 0x0D, 0x42, 0x89,
        0x3F, 0xB1, 0xB2, 0x6A, 0xAD, 0xFF, 0xF0, 0xED, 0x50, 0x89, 0xF7, 0x33,
        0xB4, 0x68, 0x07, 0x07, 0xC7, 0x1C, 0xC1, 0xC0, 0xED, 0xFD, 0x69, 0x9D,
        0xCF, 0x95, 0x65, 0xEA, 0x91, 0xA2, 0x80, 0xDF, 0x40, 0x2D, 0xAC, 0x0F,
        0x69, 0x5B, 0xAC, 0x45, 0x5B, 0xF1, 0x0A, 0x43, 0x11, 0x36, 0x81, 0x9C,
        0x42, 0x54, 0x7B, 0xFB, 0xD1, 0xE0, 0xA0, 0x36, 0xAF, 0xCB, 0xD2, 0x51,
        0xBD, 0xCE, 0x42, 0x4B, 0x78, 0xD1, 0x34, 0x40, 0xC9, 0x11, 0xCA, 0xA7,
        0x5A, 0x61, 0x51, 0x9B, 0x2B, 0x7E, 0x0D, 0x43, 0x8D, 0x29, 0xED, 0x05,
        0x7D, 0xDC, 0x9F, 0xC3, 0x3E, 0x22, 0x19, 0x34, 0x3A, 0x36, 0x1C, 0x19,
        0xD5, 0x48, 0xF9, 0x1F, 0xFA, 0x8A, 0xFF, 0x19, 0xD6, 0xA8, 0x16, 0xD1,
        0x8E, 0x12, 0x70, 0x38, 0x1C, 0xA8, 0x21, 0x06, 0x13, 0x79, 0x37, 0x67,
        0x58, 0x1D, 0x3D, 0x8E, 0x41, 0xD6, 0x4A, 0x63, 0xD8, 0xA7, 0xEF, 0x2C,
        0x2C, 0x2D, 0x08, 0xEB};
    static unsigned char dhg_2048[] = {0x02};
    DH *dh = DH_new();
    BIGNUM *p, *g;

    if (dh == nullptr)
        return nullptr;
    p = BN_bin2bn(dhp_2048, sizeof(dhp_2048), nullptr);
    g = BN_bin2bn(dhg_2048, sizeof(dhg_2048), nullptr);
    if (p == nullptr || g == NULL || !DH_set0_pqg(dh, p, NULL, g)) {
        DH_free(dh);
        BN_free(p);
        BN_free(g);
        return nullptr;
    }
    return dh;
}

EVP_PKEY *gen_keypair() {
    // generate dh params p and g
    DH *tmp;
    if ((tmp = get_dh2048()) == nullptr) {
        handle_errors();
    }

    EVP_PKEY *dh_params;
    if ((dh_params = EVP_PKEY_new()) == nullptr) {
        DH_free(tmp);
        handle_errors();
    }

    if (EVP_PKEY_set1_DH(dh_params, tmp) != 1) {
        DH_free(tmp);
        EVP_PKEY_free(dh_params);
        handle_errors();
    }
    DH_free(tmp);

    // generate private and public key
    EVP_PKEY_CTX *ctx = EVP_PKEY_CTX_new(dh_params, nullptr);
    if (ctx == nullptr) {
        EVP_PKEY_free(dh_params);
        handle_errors();
    }

    EVP_PKEY *keypair = nullptr;
    if (EVP_PKEY_keygen_init(ctx) != 1) {
        EVP_PKEY_free(dh_params);
        EVP_PKEY_CTX_free(ctx);
        handle_errors();
    }
    if (EVP_PKEY_keygen(ctx, &keypair) != 1) {
        EVP_PKEY_free(dh_params);
        EVP_PKEY_CTX_free(ctx);
        handle_errors();
    }

    EVP_PKEY_free(dh_params);
    EVP_PKEY_CTX_free(ctx);

    return keypair;
}
